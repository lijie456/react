       	                
		 注： 这篇文章并不是教程，只是我对React原理的一些个人理解及相关语法介绍，欢迎与我一起讨论。
                                                                            文章不对的地方，还请读者费心指出

 	React框架晋升为当下热门框架的原因之一就是React很少直接操作DOM，从而提升性能，便于后期优化，浏览器事件也是一样。原因是太多的浏览器事件会占用很大内存。

	React为此自己实现了一套合成系统，在DOM事件体系基础上做了很大改进，减少了内存消耗，简化了事件逻辑，最大化解决浏览器兼容问题。

 	为了在浏览器中使用react，我们需要引用两种类库：React和ReactDOM。React是用来创建视图的；ReactDOM是用来在浏览器中渲染UI的。
  	
	***！！react 组件生命周期个人理解：
	组件生命周期：组件从创建到挂载到页面运行、完成复杂的组件功能、分析组件错误原因等。

	**钩子函数的作用：为开发人员在不同的阶段操作组件提供了时机。
	类型：

	1.挂载
	  constructor                                       初始化state
	  componentWillMount                    （已弃  
	  static getDerivedStateFromProps() （新增  场景少挂载前，更新前
	  render                                                渲染数据
	  componentDidMount                       异步请求、特效ecahrts、swiper、better-scroll
	
	2.更新
	shouldComponentUpdate                                   性能优化避免重复render     优化：React.PureComponent
	componentWillUpdate               	             （已弃  
	static getDerivedStateFromProps()                      （新增    场景少
	render                                  			 渲染数据      
	getSnapshotBeforeUpdate                                      （新增    获取滚动条  交给  componentDidUpdate  
	componentDidUpdate(prevProps, prevState)           特效数据变化，更新调用 

	componentWillReceiveProps()                                  （已弃  监控属性变化

	3.卸载：
	componentWillUnmount()                  清除定时器、

	**总结：
	# 新增
	static getDerivedStateFromProps(props)
	getSnapshotBeforeUpdate(oldProps, oldState)

	# 弃用
	componentWillMount()	
	componentWillUpdate(newProps, newState)		
	componentWillReceiveProps(newProps)
	
	**虚拟DOM：
	     用JS对象描述真实的DOM结构，因为浏览器工作机制，通过虚拟DOM提升性能	
	     浏览器工作机制？  
	     浏览器工作机制：回流重绘
	     回流：页面布局流发生改变就叫做回流
	     重绘：重新布局影响元素外观、风格、不影响布局
	
	**diff算法：
	    核心思想新旧DOM树同层比较
	    1 步骤一：用JS对象模拟DOM树
	    2 步骤二：比较两棵虚拟DOM树的差异
	    3 步骤三：把差异应用到真正的DOM树上

	下面以常用函数方法，以及class方法举例介绍：
	<div class="app"></div>
	<script src="./react.js"></script>
	<script src="./reactdom.js"></script>
	<script src="./babel.js"></script>
	<script type="text/babel">
	  //函数组件
    		function Text(props){
        			return (<div>
            			<p>状态：{props.status}</p>
            			<p>状态：{props.msg}</p>
        			</div>)
    			}
   	 //class组件

		class Text2 extends React.Component
    		{
        			render() {
            				return (<div>
                			<p>状态：{this.props.status}</p>
                			<p>状态：{this.props.msg}</p>
            		           		</div>)  
        				}
    		}

    		ReactDOM.render(<div>
		<Text status='true' msg='上看看' />
   	 	<hr />
    		<Text2 status='false' msg='上课看' />
   	 	</div>,
    		document.querySelector('.app'))
	</script>
	
	